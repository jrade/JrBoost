Stub -> Stump

Python wrapper class
	constructor that takes indata, outdata and cParam
	classify function
	that's it??

run with real data

weight overflow
	log min and max of outData * F
	regularize - modify the target function?

------------------------------------------------

logit boost

optimizations:
	have the boost trainer not create a new base trainer each time

low prio:
	test again to pass inData as const (as const Ref<const ArrayXXf>&)
	inData, outData, weights, options as Python properties_
	look in the old stub (or rather tree) builder code and see how I avoid rounding off errors towards the end
	make Gerstmann.h standard compliant

-------------------------------------------

try mixed debugging again

trees

SIMD optimization

multi-group trees

parallellized hyperparameter evaluation

low prio:
	avoid copying of ArrayXf

PyBind11 issues:
	report abstract factory crash (JrBooster Crash)
		is the problem return values that are derived objects passed with unique_ptr to base class
		test with the Miniconda that somes bundles with Visual Studio
	how translate custom C++ exceptions to standard Python exceptions
	
Gerstmann issues:
	add move constructors to enable code such as
		xorshift rne((std::random_device()));
	seed function would be useful
	free functions (operator== and operator!=) should be inline
		or linker will complain if you include the header in multiple translation units

--------------------------------------------------------------------------------

läs: https://romanpoya.medium.com/a-look-at-the-performance-of-expression-templates-in-c-eigen-vs-blaze-vs-fastor-vs-armadillo-vs-2474ed38d982

Notes:
	MSVS 2019:
		Tools > Options > Python > Conda: ..../conda.exe
		compiler flag:  /permissive-
		Run-time Library = Multi-threaded DLL (/MD) (for all configurations!)
		mixed debugging

	numpy: rowmajor
	eigen: colmajor

	https://docs.microsoft.com/en-us/visualstudio/python/working-with-c-cpp-python-in-visual-studio?view=vs-2019
