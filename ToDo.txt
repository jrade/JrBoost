

main                      4710   2.8%
  t-rank                  5622   3.4%    4.8
  train boost            18821  11.3%   22.5
    validate              7413   4.4%    9.0
    used samples          9579   5.7%   11.5
    used variables        4716   2.8%   14.3
    sums                   777   0.5%    9.7
    sorted used s.       79237  47.4%    3.8
    best split           31760  19.0%   14.0
  predict                 1870   1.1%
  OMP barrier              448   0.3%
  dyn. memory             2078   1.2%  434.9

zero calibration: 68
profiling overhead: 16.8%
slow branch: 2.5%

0:01:38


14 used samples * used variables
4 all samples * used variables

14 * us * uv + 4 * s * v

(14 usr + 4

(4 * us *v + 14 * s * v)

=====================================================================

C++:
	array element data types
		profile before and after
			save profile logs
		weights and outdata as float instead of double?
		raw outdata and strata as uint8_t?
			ArrayXu8

	other way of generating sorted list of samples
		create used sample list
		then sort this list
			test with pdq-sort (https://github.com/orlp/pdqsort)

	do some micro-optimizations
		sums in partcular
		ideas
			move things into local varables
			access arrays through raw poiners
				how to get pointer to buffer of Eigen::CRef object?
		try __declspec(noalias)


python:
	clean repo
		test with CERN boson data instead
		push to GitHub

	produce report
		first a simple one
		add a train and predict function similar to train and eval

	Pandas free Python code

	implement smarter hyperparameter optimization methods

-----------------------------------------------------------------------

gradient boost
	read xgb paper to check that my understanding is correct

trees
	allocate nodes with a memory pool
	pruning

data members of boosters should be const
	can not iterate over const Eigen Ref object!!!!

test PGO

extended algorithms:
	check if alpha boost idea works
	first and second order boost
	alpha boost
	alpha-beta boost with beta loss

----------------------------------------------------------------------

low prio:
	look in the old stub (or rather tree) builder code and see how I avoided rounding off errors towards the end
	L2-penalty (lambda) or L1-penalty (alpha)
	multi-group

----------------------------------------------------------------------

PyBind11 issues:
	how translate custom C++ exceptions to standard Python exceptions
	no way of specifying noocnvert for property setters
	investigate abstract factory crash (JrBooster Crash)
		is the problem return values that are derived objects passed with unique_ptr to base class?
		test with the Miniconda that somes bundles with Visual Studio
	
Gerstmann issues:
	seed function would be useful
	free functions (operator== and operator!=) should be inline
		or linker will complain if you include the header in multiple translation units
	should be standard compliant

Eigen issues:
	can not reset Ref objects
	no select with two constants
	    StumpTrainerImpl(CRefXXf inData, RefXs strata)
			second argument should be CRefXs, but that leads to problems ...

	Eigen::Ref<Eigen::ArrayXf> u;
	auto p1 = u.begin();
	auto p2 = begin(u);
	auto p3 = u.cbegin();
	auto p4 = cbegin(u);
	float* p5 = &u(0);

	Eigen::Ref<Eigen::ArrayXf> u;
	auto q1 = u.cbegin();
	auto q2 = cbegin(u);
	const float* q3 = &u(0);

	also reverse iterators

NumPy issues:
	inData[trainSamples, :] does not preserve Fortran (column major) order

------------------------------------------------------------------------

take a look at std::span, std::view, std::mdview, ranges etc in C++20

