
Go through Foo branch and see if it contains anything useful

-----------------------------------------------

TSP:
	interrupt handling
		place inside the two outer loops
		need exception safe omp parallel
			profile

	option to select PDiff or Chi2 mode

better error messages for functions with noconvert arguments
	overload with a version without noconvert that throws an exception with an informative error message

TreeTrainerImpl:
	make the profiling work properly again
		profile threading overhead
			outer thread synch takes too much time
				test case: test leukemia with tree depth > 1 on work PC
	better function names
	review all code once more

improved Higgs precise
	based on St Jude codes
	old notes
		use this to improve boost params in higgs_fast.py
		fit splines to AMS
		should use higg_util

......................................................................................................

report:

	MSVS autovectorizer:
		does not handle reinterpret cast
		does not handle  a + (b < c)  very well with AVX2

	pybind11:
		seem py::kw_only() does not interact well with callbacks
			insert py::kw_only() in LogLoss::operator() and run Iris.py

	Eigen:
		why cannot we use (a < inf).all() to detect NaN values in Eigen arrays?
			using isFinite is very slow (considering we only need to inspect a few bits)
		why does std::data() not work here? (see Select.cpp)
			const float* pInDataRowI = std::data(inData.row(inI));
			float* pOutDataRowI = &outData(outI, 0);

.............................................................................
		
major tasks:
	release 0.1
	BART
	documentation of the different boost methods, incuding regularized logit boost
	tree regularization: L2 penalty (lambda), L1 penalty (alpha)
	gradient boost (Friedman and xgb papers)
		first and second order boost with any gamma
	compare performance (speed and accuracy) with xgboost
		construct Python classes with same interface as jrboost python classes
	multinomial predictors
	what is the standard code organization for a Python extension module?
	dynamic CPU-specific dispatch
		stackoverflow.com/questions/6121792/how-to-check-if-a-cpu-supports-the-sse3-instruction-set

features to add:
	log boost parameter optimization process
		log quartiles of each parameter after each cycle
	U-test (with correct handling of ties)
	multiple indata and multiple variable counts (to handle advanced feature engineering and selection)
		applications: PCA, separate counts for up- and down-regulated variables, chromosomes, NCC
	new way of calculating variable importance weights: when predicting (instead of when training)
	have train, predict and loss functions take samples argument?

optimizations (accuracy):
	pruning
	mixed boost: first n ierations of Ada boost, then n iterations of (regularized?) logit boost
	iterate from both ends and meet in the middle when finding best split
	better parallelTrainAndEval for non-additive loss function (such as AUC)
	boost stop criteria
	other ways of regularizing logit boost (should be scale invariant)
	the current minNodeWeight option is absolute min node weight
		how about relaative min node weight (relative to sumW)?
	
optimizations (speed):
	optimize tree builder for binary variables (useful with top scoring pairs)
		extend this to histogram based tree builder
	dynamic adjustment of inner and outer thread counts
	t-test and F-test: are they SIMD optimized? do we load each cache line twice for large data sets?
	Clang + LLVM + CMake for Visual Studio
		maybe no need then for IntelIntrinsics implementation of fastExp()
	PGO

test AVX-512 code (fastExp() and topScoringPairs())
	tune topScoringPairs blockSize again
	do we gain any speed by manual vectorization in topScoringPairs() with AVX-512? probably not

keep or ditch?
	fine-grained stratification (does it improve accuracy?)
	py::arg().noconvert() in t-test and F-test python wrappers
	are the following options useful?
		saveMemory,
		stratifiedSamples
		cycle
	support for loading very old file format versions
