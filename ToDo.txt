
review use of ArrayXs
	use for lists of samples or not?

just keep the simplest jrboost train function as a standard function
	use this in Iris and Higgs
		kan the standard optimize nyperparams function be used any other way?
	have ALL and AML use their own train functions
	review ALL and AML code
	also support for weights
	ditch jrboost._train
	ditch jrboost._preprocess_and_train
	clean up jrbooost._init

make sure ALL and MLL use uint8 for out data

review all functions with parallelism, esp. nested parallelism

..................................................................................

improved Higgs example

test and evaluate cycle option
	run Leukemia 20x10x5 with and w/o cycling

test and evaluate minNodeWeight again
	min¡bsNodeWeight and minRelNodeWeight???

test compiling with Clang for Visual Studio
	devblogs.microsoft.com/cppblog/clang-llvm-support-in-visual-studio/
	do we need the Intel Intrinsics to parallellize fastExp()?  Probably not

report:

	MSVS autovectorizer:
		does not handle reinterpret cast
		if they fix this, then ditch all the Intel intrinsics code

	pybind11:
		seems arguments of types such as optional<reference_wrapper<vector<int>>> are not supported
			that would be useful for passing sample lists to t-test and F-test
		seem py::kw_only() does not interact well with callbacks
			insert py::kw_only() in LogLoss::operator() and run Iris.py

	Eigen:
		why cannot we use (a < inf).all() to detect NaN values in Eigen arrays?
		why does std::data() not work here? (see Select.cpp)
			const float* pInDataRowI = std::data(inData.row(inI));
			float* pOutDataRowI = &outData(outI, 0);

............................................................................

BART

other ways of regularizing logit boost

.............................................................................
		
major tasks:
	release 0.1
	documentation of the different boost methods, incuding regularized logit boost
	improved Higgs example (see "Higgs Notes.txt")
	improved Otto example (see "Otto Notes.txt")
	tree regularization: L2 penalty (lambda), L1 penalty (alpha)
	gradient boost (Friedman and xgb papers)
		first and second order boost with any gamma
	compare performance (speed and accuracy) with xgboost
		construct Python classes with same interface as jrboost python classes
	histogram-based tree builder (would speed up Otto a lot, maybe Higgs too)
	multinomial predictors
	Clang + CMake for Visual Studio
		what is the standard code organization for a Python extension module?

features to add:
	log parameter optimization process
		log quartiles of each parameter after each cycle
	U-test (with correct handling of ties)
	multiple indata and multiple variable counts (to handle feature engineering)
		applications: PCA, separate counts for up- and down-regulated variables, chromosomes, NCC
	new way of calculating variable importance weights: when predicting (instead of when training)
	exception safe profiling
	have train, predict and loss functions take samples argument?

optimizations (accuracy):
	iterate from both ends and meet in the middle when finding best split
	better parallelTrainAndEval for non-additive loss function (such as AUC)
	boost stop criteria
	pruning
	other ways of regularizing logit boost (should be scale invariant)
	
optimizations (speed):
	test compiling with LLVM for Visual Studio
	parallelize:
		ForestTrainer::train
		TreeTrainer::updateSampleStatus_
			easier if we do not use exact sums; can we do that?
	make branch free:
		TreeTrainer::updateSampleStatus_:
			introducing dummy nodes that contain the unused samples
			maybe maintain sorted lists of active samples to speed this up further
	t-test and F-test: are they SIMD optimized? do we load each cache line twice for large data sets?
	look into fast/precise sums; does it make any difference for speed and accuracy?
	have boost trainer produce packed wy data and feed it to tree trainer (some SIMD swizzle magic needed?)
	PGO

keep or ditch?
	fine-grained stratification (does it improve accuracy?)
	packed data (does it improve speed?)
		if we keep it, don't pass around outData and weights
	py::arg().noconvert() in t-test and F-test python wrappers
	saveMemory option
	stratifiedSamples option
	support for loading old file format versions
	cycle options
