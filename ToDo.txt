
advanced profiling system

review the nested CV code

produce report
	first a simple one
    add a train and predict function similar to train and eval

full fledged F-statistic

stratifiedSubmask
	not hard to implement actually
	this shold take care of sumW_ = 0 problem
	add a minSampleWeight parameter and profile how many samples that fall below this
	also profile, seems a bit slow

play around with what we have - how good does it get?

test PGO

--------------------------------------------------------------------

gradient boost
	read xgb paper to check that my understanding is correct

trees
	pruning

--------------------------------------------------------------------

later:
	how to handle sumW_ == 0.0
		curretnly we return a stumppredictor that always predicts 0
		a better fix would be make sample selection among samples with weight != 0 (or > some threshold)
			this could be implemented as a stratified selection with weight 0 samples as a third stratum

	data members of boosters should be const
		can not iterate over const Eigen Ref object!!!!

	SIMD parallelize the variable (j) loop
		time matrix transpose

	more memory efficient data in inner loop (use smalller integer types in arrays) - can save about 10%

	profile the parallellized part only and check how the performance scales with the number of processors

	allocate tree nodes with a memory pool
		
-----------------------------------------------------------

follow up alpha boost idea

----------------------------------------------------------------------

low prio:
	look in the old stub (or rather tree) builder code and see how I avoided rounding off errors towards the end
	faster uint64_t based Bernoulli distribution ??
	allow more than two strata in StumpPredictor?
	L2-penalty (lambda) or L1-penalty (alpha)
	multi-group

----------------------------------------------------------------------

PyBind11 issues:
	how translate custom C++ exceptions to standard Python exceptions
	no way of specifying noocnvert for property setters
	investigate abstract factory crash (JrBooster Crash)
		is the problem return values that are derived objects passed with unique_ptr to base class?
		test with the Miniconda that somes bundles with Visual Studio
	
Gerstmann issues:
	add move constructors to enable code such as
		xorshift rne((std::random_device()));
	seed function would be useful
	free functions (operator== and operator!=) should be inline
		or linker will complain if you include the header in multiple translation units
	should be standard compliant

Eigen issues:
	can not reset Ref objects
	no select with two constants
	    StumpTrainerImpl(CRefXXf inData, RefXs strata)
			second argument should be CRefXs, but that leads to problems ...

NumPy issues:
	inData[trainSamples, :] does not preserve Fortran (column major) order

------------------------------------------------------------------------

läs: https://romanpoya.medium.com/a-look-at-the-performance-of-expression-templates-in-c-eigen-vs-blaze-vs-fastor-vs-armadillo-vs-2474ed38d982

Notes:
	MSVS 2019:
		Tools > Options > Python > Conda: ..../conda.exe
		compiler flag:  /permissive-
		Run-time Library = Multi-threaded DLL (/MD) (for all configurations!)
		mixed debugging

	numpy: rowmajor
	eigen: colmajor

	https://docs.microsoft.com/en-us/visualstudio/python/working-with-c-cpp-python-in-visual-studio?view=vs-2019


----------------------------------------------------------------------------

https://stackoverflow.com/questions/29519222/how-to-transpose-a-16x16-matrix-using-simd-instructions
